
这个关键字已经纠结了很久，今天终于有一个结论了
首先必须明白：在jdk6和jdk7的区别，
		jdk6：如果字符串在常量池里面没有，那么就会在常量池创建一个该实例字符串，然后返回的是指向常量池字符串的引用
				如果存在了，那么就会直接返回常量池中的字符串地址引用
		jdk7：如果字符串在常量池里面没有，那么不会将字符串拷贝到常量池，而是在常量池中存储一份改字符串出现的引用，（一般都是指向堆中），返回的也是这个引用，而不是常量池的地址
				如果存在了，跟上面一样返回字符串在常量池中的地址引用
				
那么来看一个例子：
        String s1;
        //s1 = new StringBuffer("a").append("b").toString(); 使用这一句，打印出true，
        //s1 = new StringBuffer("ab").toString();            使用这一句，打印出false
        s1.intern();
        String s2="ab";
        System.out.println(s1==s2);

	问题现在就出现在 StringBuffer("a").append("b")和StringBuffer("ab")有什么区别了？
	
	借助反编译的工具可以将上面的两句编译如下：
	s1 = "a" + "b";
	s1 = "ab";
	区别就是a 和 b分开了（但是一定要区分开源代码里面的 s1 = "a"+"b",这编译出来就是s1="ab",这里是反编译，是两码事）
	分开了说明，第一个s1 将 a 和 b当成一个常量，存入了常量池，但是ad没有存入
		第二个ab当成了一个常量，存入了常量池，这里没有存入a 和 b常量
		
	
	再来看源码：
	s1 = new StringBuffer("ab").toString(); 
	s1 = "ab"; 
	反编译出来的都是
	s1 = "ab"; 
	s1 = "ab"; 
	这个时候千万不要理解成他们就是完全一模一样了，他们区别就是s1的指向不同了，前者指向堆，后者指向常量池。
	其实只要记住：只要是new的，返回的引用肯定是指向堆中地址。
	但上面这两个还是有一个是相同的，就是都将字符串存入了常量池。
	
	
	
再来看看别的赋值方式和对应的反编译
源码：
	1 String s1 = "12345";
	2 String s2 = s1 + "6789";
	3 String s3 = new StringBuffer("123456789").toString();
	4 String s4 = new StringBuffer("12345").append("6789").toString();
	5 String s5 = new String("123456789");
	6 String s6 = "12345" + "6789";
	
对应的反编译：
	1 String s1 = "12345";
    2 String s2 = s1 + "6789";
    3 String s3 = "123456789";
    4 String s4 = "12345" + "6789";
    5 String s5 = new String("123456789");
    6 String s6 = "123456789";
	
	只要是new的指向都是堆，而StringBuffer和String可以看出，他们的反编译差异很大，但是作用一样，都是指向堆，并且都会在常量池中创建字符串。
	
	
再看一个例子：
	s1 = new StringBuffer("a").append("b").toString();
	s1.intern();
	String s2="ab";
	System.out.println(s1==s2);
	分析：第一句是将a 和 b 存入常量池，s1执行堆中的ab，
	s1.intern()作用：因为这个时候常量池没有ab，所以在jdk7中，就会在常量池中存一个引用，这个引用指向的是堆中ab，并且返回的也是这个引用
	s2="ab"作用：因为首先jvm回去检查常量池中有没有ab，这里检查有，虽然只是一个指向堆的引用，但还是检查到了，所以不会新建，而是会返回这个指向堆中的引用
	最后的打印自然就是true，因为都是指向堆中ab的引用。
	

所以我们以后获取一个字符串，可能获取的是常量池中指向堆中的引用；
	或者获取的是常量池中的字符串地址
	
	
	

了解了这一点，那么就可以去分析各种关于字符串的 == 的比较了
	
	
注意：
上面的说在常量池中创建字符串其实都是不准确的，因为字符串其实都是存在堆中的，常量池中只是一个引用，但是从理解上面可以这么理解。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

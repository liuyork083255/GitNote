1 首先是对 location中的 root 的理解

location /myhtml/ {
	root /filehtml;
	index index1.html;
}

这一段表示如果浏览器输入 http://IP/myhtml  是没有文件的
	必须在后面加一个 / 符号    也就是    http://IP/myhtml/
	这样才会进入filehtml文件夹下面的的myhtml文件下面的文件   
	如果直接写http://IP/myhtml/，说明后面没有文件，
	那么必须在root下面配置默认文件 
		index index.html   这样才不会出错。
	如果不配默认的文件，那么在我们url最后必须给出具体页面的 /名称.后缀名

然后针对root文件夹说明：
	以 / 开头的 说明都是在nginx服务器上面的，比如上面就表示在linux服务器上面有一个filehtml文件夹

然后针对root文件夹的路径匹配说明：
	location后面的路径会被添加到root指定路径的后面，也就是要访问的页面必须放在linux服务器的
	filehtml文件里面的myhtml文件里面

如果路径都对了，访问出现 forbidden 403 错误
一般有两个原因
	1 该文件没有找到，说明没有该文件，需要继续查看路径
	2 权限不够，也就是该文件的读写权限和该文件上层目录的读写权限不够
		解决：
			1 修改权限 777
			2 在nginx.conf文件头部加入 user root即可
				当然，具体加root还是什么得看这个文件数属于那个用户的，
				可以使用xftp，一下就看到权限和所属用户了





---------------------------------------------------------------------
下面讲解 location后面的 路径和 proxy_pass 后面 路径
由于这里很复杂，如果想简单使用则使用下面规范：
1 首先在location层 不考虑 通配符 和 ==等   所有字段都是用 /xxx/ 前后各一个/


	这里是补充，如果在location后面加了/这个符号，那么我们在匹配到了这个路径后会去找这个目录下面
	的资源，如果没有这个符号，那么说明就是要的当前目录下的资源
	这也就是为什么上面说的 访问root里面的资源，我们浏览器url最后加上/这个符号




2 在proxy_pass层，如果末尾加了/符号，那么 整个url后面就不会加入location值，
	只加入浏览器中的url被location匹配到的后面一截
	如果是没有加入/ ，那么访问的url就会加入浏览器访问的url被location匹配中的以及后面的都会加入。





---------------------------------------------------------------------
下面讲解upstream限制：
在upstream模块里面的server 后面只能写ip：端口，后面不能再加入具体的某一个文件或某一个程序了

例如：
upstream backend{
	server 172.16.66.81:8510/web;
	server 172.16.8.127:8510/web;
}
这样是无法启动的 

解决：
只需要将后面的 字段加载location里面

例如：
location /bab_qutoe/ {
	proxy_pass http://backend/web/;
}

然后在upstream中的server后面的web删除就可以了。







---------------------------------------------------------
以后还要注意：代理路径尽量只代理前面一部分，也就是
proxy_pass http://backend/web/index.html;尽量不要出现页面，让用户来输入
我们只匹配前面ip即可   ，或者在匹配一个项目名称。
更加详细的路径让用户填写访问。


因为有时候会出现一个问题就是，访问一个html页面，但是程序会跳到一个登陆界面，所以这个时候
会挑不出来，让用户输入后面的页面就可以了

例如：
proxy_pass http://172.16.8.127:8510/bab_quote/dist/index.html/;

让proxy_pass 匹配到dist或者bab_quote都是可以的



















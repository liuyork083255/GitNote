关于springboot的注解：
在支持 Spring Cache 的环境下，
	@EnableCaching : 开启SpringBoot缓存策略，放在启动主类。
	@CacheConfig(cacheNames = "XXX") : 设置一个名为”XXX”的缓存空间。
	@Cacheable : Spring在每次执行前都会检查Cache中是否存在相同key的缓存元素，如果存在就不再执行该方法，
		而是直接从缓存中获取结果进行返回，否则才会执行并将返回结果存入指定的缓存中。
	@CacheEvict : 清除缓存。
	@CachePut : @CachePut也可以声明一个方法支持缓存功能。使用@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，
		而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。
		
使用springboot-redis首先是引入依赖，然后开启缓存，即@EnableCaching（这个是必须的）

1 如果方法体返回的是对象，如果没有序列化对象，存入redis是会报错的
2 方法体返回如果是null，那么是不会存入redis的
3 经过验证，如果方法被注释缓存，那么请求key如果在redis中，方法体是不会进入的，而是直接返回redis的值，如果不在才会进入方法体，返回值
4 序列化value对象：
	    @Bean
    public CacheManager cacheManager(RedisTemplate redisTemplate) {
        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);
        return rcm;
    }
    /**
     * RedisTemplate配置
     * @param factory
     * @return
     */
    @Bean
    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {
        StringRedisTemplate template = new StringRedisTemplate(factory);
        //定义key序列化方式
		//        RedisSerializer<String> redisSerializer = new StringRedisSerializer();//Long类型会出现异常信息;需要我们上面的自定义key生成策略，一般没必要
		//        template.setKeySerializer(redisSerializer);

        //定义value的序列化方式
        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);
        ObjectMapper om = new ObjectMapper();
        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
        jackson2JsonRedisSerializer.setObjectMapper(om);
        template.setValueSerializer(jackson2JsonRedisSerializer);
        template.setHashValueSerializer(jackson2JsonRedisSerializer);
        template.afterPropertiesSet();

        return template;
    }
	这样设置过后，查询返回的值是对象，那么就会自动序列化成json格式
	其实如果不这么设置，RedisTemplate默认使用jdk序列化，但是如果这个对象没有实现Serializable接口那么就会报错
	还有很多的序列化类：
		GenericToStringSerializer：使用Spring转换服务进行序列化；
		JacksonJsonRedisSerializer：使用Jackson 1，将对象序列化为JSON；
		Jackson2JsonRedisSerializer：使用Jackson 2，将对象序列化为JSON；
		JdkSerializationRedisSerializer：使用Java序列化；
		OxmSerializer：使用Spring O/X映射的编排器和解排器（marshaler和unmarshaler）实现序列化，用于XML序列化；
		StringRedisSerializer：序列化String类型的key和value。实际上是String和byte数组之间的转换









首先时知道集成的方式很多，网上很多，公司里面用的也是一套，都不同
那么先用一中入门再说：

参考链接：http://www.cnblogs.com/java-zhao/p/5350021.html

springboot集成了springJDBC与JPA，但是没有集成mybatis，所以想要使用mybatis就要自己去集成。集成方式相当简单。

然后是mapper.xml文件现在一般都是放在resources目录下面，公司项目也是这样

依赖：
 1         <!-- 与数据库操作相关的依赖 -->
 2         <dependency>
 3             <groupId>org.springframework.boot</groupId>
 4             <artifactId>spring-boot-starter-jdbc</artifactId>
 5         </dependency>
 6 
 7         <!-- 使用数据源 -->
 8         <dependency>
 9             <groupId>com.alibaba</groupId>
10             <artifactId>druid</artifactId>
11             <version>1.0.14</version>
12         </dependency>
13         
14         <!-- mysql -->
15         <dependency>
16             <groupId>mysql</groupId>
17             <artifactId>mysql-connector-java</artifactId>
18             <scope>runtime</scope>                 ---------------这个没有写版本是因为spirngboot里面定义了
19         </dependency>
20         
21         <!-- mybatis -->
22         <dependency>
23             <groupId>org.mybatis</groupId>
24             <artifactId>mybatis</artifactId>
25             <version>3.2.8</version>
26         </dependency>
	   <!-- 添加mybatis与Spring整合的核心包 -->
27         <dependency>
28             <groupId>org.mybatis</groupId>
29             <artifactId>mybatis-spring</artifactId>
30             <version>1.2.2</version>
31          </dependency>  

说明：

spring-boot-starter-jdbc：引入与数据库操作相关的依赖，例如daoSupport等

druid：阿里巴巴的数据源
mysql-connector-java：mysql连接jar，scope为runtime
mybatis + mybatis-spring：mybatis相关jar


application.properties文件：

 jdbc.driverClassName = com.mysql.jdbc.Driver
 jdbc.url = jdbc:mysql://xxx:3306/mytestdb?zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=utf-8
 jdbc.username = root
 jdbc.password = vvvxxx
 
 mybatis.typeAliasesPackage=com.xxx.firstboot.domain  
 mybatis.mapperLocations=classpath:mapper/*.xml

说明：

mybatis.typeAliasesPackage：指定domain类的基包，即指定其在*Mapper.xml文件中可以使用简名来代替全类名（看后边的UserMapper.xml介绍）
mybatis.mapperLocations：指定*Mapper.xml的位置


配置类：MyBatisConfig

/**
  * springboot集成mybatis的基本入口
  * 1）创建数据源
  * 2）创建SqlSessionFactory
  */
 @Configuration    //该注解类似于spring配置文件
 @MapperScan(basePackages="com.xxx.firstboot.mapper")         ----------------这个扫描必须要有，不然启动报错
 public class MyBatisConfig {
     
     @Autowired
     private Environment env;
     
     /**
      * 创建数据源
      * @Primary 该注解表示在同一个接口有多个实现类可以注入的时候，默认选择哪一个，而不是让@autowire注解报错 
      */
     @Bean
     //@Primary          --------------------如果使用这个接口，那么如果有多个实现类实现了DataSource，那么默认使用下面这个
     public DataSource getDataSource() throws Exception{
         Properties props = new Properties();
         props.put("driverClassName", env.getProperty("jdbc.driverClassName"));
         props.put("url", env.getProperty("jdbc.url"));
         props.put("username", env.getProperty("jdbc.username"));
         props.put("password", env.getProperty("jdbc.password"));
         return DruidDataSourceFactory.createDataSource(props);
     }
 
     /**
      * 根据数据源创建SqlSessionFactory
      */
     @Bean
     public SqlSessionFactory sqlSessionFactory(DataSource ds) throws Exception{
         SqlSessionFactoryBean fb = new SqlSessionFactoryBean();
         fb.setDataSource(ds);//指定数据源(这个必须有，否则报错)
         //下边两句仅仅用于*.xml文件，如果整个持久层操作不需要使用到xml文件的话（只用注解就可以搞定），则不加
         fb.setTypeAliasesPackage(env.getProperty("mybatis.typeAliasesPackage"));//指定基包-----------也就是在mapper里面可以使用POJO的类名，而不用加包名
         fb.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(env.getProperty("mybatis.mapperLocations")));//指定xml文件位置
					---------公司项目也是用这个方式来加载资源文件的
         return fb.getObject();
     }
 
 }

说明：

类上边添加两个
		@Configuration注解（该注解类似于spring的配置文件）
		@MapperScan注解，指定扫描的mapper接口所在的包
	在该类中，注入了Environment实例，使用该实例可以去读取类路径下application.properties文件中的内容，读取文件内容的三种方式，见第二章 第二个spring-boot程序
	在该类中，使用druid数据源定义了数据源Bean，spring-boot默认使用的是tomcat-jdbc数据源，这是springboot官方推荐的数据源（性能和并发性都很好）
	根据数据源生成SqlSessionFactory
		值得注意的是，数据源是必须指定的，否则springboot启动不了
		typeAliasesPackage和mapperLocations不是必须的，如果整个项目不需要用到*Mapper.xml来写SQL的话（即只用注解就可以搞定），那么不需要配
	@Primary注解：指定在同一个接口有多个实现类可以注入的时候，默认选择哪一个，而不是让@Autowire注解报错（一般用于多数据源的情况下）
这样之后，在项目中再使用springboot就和在ssm中（配置完成后）使用一样了。



Mapper类：
public interface UserMapper {

	-----------可以发现，这里可以直接使用注解的方式写入sql语句，但是真正的项目中不会这样，因为如果要改动，源代码就要重新编译，
				还是使用下面的方式，即使用xml文件
	@Insert("INSERT INTO tb_user(username, password) VALUES(#{username},#{password})")
	public int insertUser(@Param("username") String username, @Param("password")  String password);

     /**
      * 插入用户，并将主键设置到user中
      * 注意：返回的是数据库影响条数，即1
      */
     public int insertUserWithBackId(User user);

}

说明：该接口中有两个方法，
一个普通插入：直接用注解搞定
一个插入返回主键：需要使用xml来搞定

下面是使用xml文件：
 <?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <!-- 指定工作空间，要与接口名相同，源代码没有去看，猜测应该是通过"这里的namespace.下边方法的id"来定位方法的 -->
 <mapper namespace="com.xxx.firstboot.mapper.UserMapper">   ----这里必须指明是哪一个mapper，这样才可以结合id 唯一锁定一个方法
     
     <!-- 若不需要自动返回主键，将useGeneratedKeys="true" keyProperty="id"去掉即可(当然如果不需要自动返回主键，直接用注解即可) -->
     <insert id="insertUserWithBackId" parameterType="User" useGeneratedKeys="true" keyProperty="id" >
        <![CDATA[
        INSERT INTO tb_user 
        (
            username,
            password
        )
        VALUES
        (
            #{username, jdbcType=VARCHAR},
            #{password, jdbcType=VARCHAR}
        )
        ]]>
    </insert>  
 </mapper>


Dao层：
 @Repository
 public class UserDao {
     
     @Autowired
     private UserMapper userMapper;
     
     public int insertUser(String username, String password){
         return userMapper.insertUser(username, password);
     }
     
     public int insertUserWithBackId(User user){    
         return userMapper.insertUserWithBackId(user);
     }   
 }






------总之：在结合mybatis的时候，首先是引入相关的依赖，然后是注入两个类，一个是DataSource    另一个就是SqlSessionFactory










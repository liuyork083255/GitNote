
在1 和 2 笔记中，生产者都是直接发送到服务端的队列中，但是在真实的使用中这种方式基本是不使用的，
	rabbitMQ其实真正的思想是生产者不发送任何信息到队列，甚至不知道信息将发送到哪个队列。
	相反生产者只能发送信息到交换机，交换机接收到生产者的信息，然后按照规则把它推送到对列中


direct 交换机模式：
	处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。*******是完全匹配
	这是一个完整的匹配。如果一个队列绑定到该交换机上要求路由键 “dog”，
	则只有被标记为“dog”的消息才被转发，不会转发dog.puppy，也不会转发dog.guard，只会转发dog
	

	代码演示：
	Channel channel = connection.createChannel();  
	channel.exchangeDeclare("exchangeName", "direct"); //direct fanout topic  
	channel.queueDeclare("queueName");  
	channel.queueBind("queueName", "exchangeName", "routingKey");  
	  
	byte[] messageBodyBytes = "hello world".getBytes();  
	//需要绑定路由键  
	channel.basicPublish("exchangeName", "routingKey", MessageProperties.PERSISTENT_TEXT_PLAIN, messageBodyBytes); 
	
	
	
	
	
生产者：
public class RoutingSendDirect {
	//交换机名称
    private static final String EXCHANGE_NAME = "direct_logs";
    // 路由关键字
    private static final String[] routingKeys = new String[]{"info" ,"warning", "error"};
    public static void main(String[] args) throws Exception {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        Connection connection = factory.newConnection();
        Channel channel = connection.createChannel();
        //声明交换机
        channel.exchangeDeclare(EXCHANGE_NAME,"direct");//注意是direct
        //发送信息
        for (String routingKey:routingKeys){
            String message = "RoutingSendDirect Send the message level:" + routingKey;
			
			//这里的 routingKey 就是路由key，这就要求消费者必须用这个对应的路由key才可以收到对应的消息
            channel.basicPublish(EXCHANGE_NAME,routingKey,null,message.getBytes());
            System.out.println("RoutingSendDirect Send"+routingKey +"':'" + message);
        }
        channel.close();
        connection.close();
    }
}

消费者1：
public class ReceiveLogsDirect1 {
    // 交换器名称
    private static final String EXCHANGE_NAME = "direct_logs";
    // 路由关键字
	//消费者2只需要将这里改为 "error" 即可，各自就可以收到info、warning 和 error 了
    private static final String[] routingKeys = new String[]{"info" ,"warning"};

    public static void main(String[] args) throws Exception {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        Connection connection = factory.newConnection();
        Channel channel = connection.createChannel();
        //声明交换器
        channel.exchangeDeclare(EXCHANGE_NAME, "direct");
        //获取匿名队列名称
        String queueName=channel.queueDeclare().getQueue();

        //根据路由关键字进行绑定
        for (String routingKey:routingKeys){
			//这里是关键，绑定的是对应的路由key
            channel.queueBind(queueName,EXCHANGE_NAME,routingKey);
            System.out.println("ReceiveLogsDirect1 exchange:"+EXCHANGE_NAME+"," +
                    " queue:"+queueName+", BindRoutingKey:" + routingKey);
        }
        System.out.println("ReceiveLogsDirect1  Waiting for messages");
        Consumer consumer = new DefaultConsumer(channel) {
        	@Override
        	public void handleDelivery(String consumerTag, Envelope envelope,
        			BasicProperties properties, byte[] body) throws IOException {
        		// TODO Auto-generated method stub
                String message = new String(body, "UTF-8");
                System.out.println("ReceiveLogsDirect1 Received '" + envelope.getRoutingKey() + "':'" + message + "'");
        	}
        };
        channel.basicConsume(queueName, true, consumer);
    }
}
	

	



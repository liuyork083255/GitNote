
public class Producer {
	//这是定义队列名称
    public final static String QUEUE_NAME="rabbitMQ.test";

    public static void main(String[] args) throws IOException, TimeoutException {
        //创建连接工厂
        ConnectionFactory factory = new ConnectionFactory();
		
        //设置RabbitMQ相关信息
        factory.setHost("localhost");
		//factory.setUsername("lp");
		//factory.setPassword("");
		// factory.setPort(2088);
		
        //创建一个新的连接
        Connection connection = factory.newConnection();
		
        //创建一个通道
        Channel channel = connection.createChannel();
		
		
		//下面这一句需要重点了解
		//  作用是声明一个队列，如果服务端已有同名的队列，那么就会判断他们的声明方式是否相同，
			相同则上面不做，不同就会报错，所以需要重新命一个名称
		// 第一个参数表示队列名称 
		// 第二个参数为是否持久化（true表示是，队列将在服务器重启时生存）
		// 第三个参数为是否是独占队列（创建者可以使用的私有队列，断开后自动删除）-----------如果只有生产者启动，那么用处不大，
				因为消息还没有被消费，消息就随着队列一起被删除
		// 第四个参数为当所有消费者客户端连接断开时是否自动删除队列
		// 第五个参数为队列的其他参数
        // channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		
        String message = "Hello RabbitMQ";
		
        //发送消息到队列中
        channel.basicPublish("", QUEUE_NAME, null, message.getBytes("UTF-8"));
		
        //关闭通道和连接
        channel.close();
        connection.close();
    }
}

===============================================================================================
public class Customer {
	private final static String QUEUE_NAME = "rabbitMQ.test";

    public static void main(String[] args) throws Exception {
        // 创建连接工厂
        ConnectionFactory factory = new ConnectionFactory();
        //设置RabbitMQ地址
        factory.setHost("localhost");
        //创建一个新的连接
        Connection connection = factory.newConnection();
        //创建一个通道
        Channel channel = connection.createChannel();
        //声明要关注的队列
        channel.queueDeclare(QUEUE_NAME, false, false, true, null);
        System.out.println("Customer Waiting Received messages");
        //DefaultConsumer类实现了Consumer接口，通过传入一个频道，
        // 告诉服务器我们需要那个频道的消息，如果频道中有消息，就会执行回调函数handleDelivery
        
        Consumer consumer = new DefaultConsumer(channel){
        	这个方法一旦收到消息就会执行
			@Override
        	public void handleDelivery(String consumerTag, Envelope envelope,
        			BasicProperties properties, byte[] body) throws IOException {
        		// TODO Auto-generated method stub
                String message = new String(body, "UTF-8");
                System.out.println("Customer Received '" + message + "'");
        	}
        };
        
        
        //自动回复队列应答 -- RabbitMQ中的消息确认机制，这个方法会阻塞
        channel.basicConsume(QUEUE_NAME, true, consumer);
    }
}

注意：
	1 channel.queueDeclare(QUEUE_NAME, false, false, true, null);这一段代码同时使用于生产者和消费者
	2 生产者和消费者谁先启动谁就会创建队列，后启动的必须保证 channel.queueDeclare(QUEUE_NAME, false, false, true, null);是一致的
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



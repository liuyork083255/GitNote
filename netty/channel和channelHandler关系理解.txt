
在Netty里，Channel是通讯的载体，也就是数据传输载体。
	而ChannelHandler负责Channel中的逻辑处理。

那么ChannelPipeline是什么呢？可以理解为ChannelHandler的容器：一个Channel包含一个ChannelPipeline，
	所有ChannelHandler都会注册到ChannelPipeline中，并按顺序组织起来。

在Netty中，ChannelEvent是数据或者状态的载体，例如传输的数据对应MessageEvent，状态的改变对应ChannelStateEvent。
	当对Channel进行操作时，会产生一个ChannelEvent，并发送到ChannelPipeline。ChannelPipeline会选择一个ChannelHandler进行处理。
	这个ChannelHandler处理之后，可能会产生新的ChannelEvent，并流转到下一个ChannelHandler。


Netty的ChannelPipeline包含两条线路：Upstream和Downstream，对应的类ChannelUpstreamHandler和ChannelDownstreamHandler
	但是自己一直没有对应的类，而且也没有使用过发送的 handler处理链。


CnannelPipeline 和 ChannelHandler 机制类似于Servlet和Filter过滤器，这种拦截器实际上是链式模式的一种变形，
CnannelPipeline是负责 ChannelHandler 的管理和事件拦截与调度，每一个ChannelHandler 都是可以中断当前的流程，结束消息的传递。


自定义拦截器：
	ChannelPipeline 通过 ChannelHandler 接口来实现事件的连接器和处理，由于ChannelHandler 中的事件种类繁多，不同的 ChannelHandler 可能只需要关系
	其中一种或者集中方法即可，所以通常 ChannelHandler 只需要继承 CChannelHandlerAdapter类来覆盖自己关系方法即可。

	我们定义的 ChannelHandler 可以设置先后顺序，而且 ChannelPipeline 可以支持动态的添加或者删除 ChannelHandler 。
	
	需要注意：ChannelPipeline 是线程安全的（synchronize实现），这意味着N个业务线程可以并发的操作ChannelPipeline 而不存在多线程并发问题，
	但是 ChannelHandler 却不是线程安全的，所以我们用户需要自己保证 ChannelHandler 的线程安全。

	ChannelPipeline 是ChannelHandler容器，内部是用链表和迭代器来实现的，意味着可以实现 ChannelHandler 的查找 添加 替换 删除。

	ChannelHaddler 支持两种注解：
		Sharable：多个ChannelPipeline 共用一个 ChannelPipeline
		Skip：被 Skip注解的方法不会被调用，直接忽略。、
		
			这里注意一下：客户端到服务端有很多的触发服务端动作条件，比如建立好连接，发送数据，断开连接等等，每一种
			动作在服务端都是形成一个Pipeline 动作链，如果某个动作引起动作，第一个handler的对应的这个方法被注解了 Skip，那么会忽视这个方法，
			自动调到下一个handler 的对应的方法。

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

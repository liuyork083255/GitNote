Mavenue 依赖：
	<dependency>
		<groupId>org.apache.curator</groupId>
		<artifactId>curator-framework</artifactId>
		<version>2.12.0</version>
	</dependency>
	<dependency>
		<groupId>org.apache.curator</groupId>
		<artifactId>curator-recipes</artifactId>
		<version>2.12.0</version>
	</dependency>
	
客户端创建连接代码：
	RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);
	CuratorFramework client =
	CuratorFrameworkFactory.newClient(
							connectString,
							sessionTimeoutMs,
							connectionTimeoutMs,
							retryPolicy);
参数说明：
		参数名						说明
	connectionString		服务器列表，格式host1:port1,host2:port2,...
	retryPolicy				重试策略,内建有四种重试策略,也可以自行实现RetryPolicy接口
	sessionTimeoutMs		会话超时时间，单位毫秒，默认60000ms
	connectionTimeoutMs		连接创建超时时间，单位毫秒，默认60000ms

使用fluent风格创建：
	RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);
	CuratorFramework client =
	CuratorFrameworkFactory.builder()
			.connectString(connectionInfo)
			.sessionTimeoutMs(5000)
			.connectionTimeoutMs(5000)
			.retryPolicy(retryPolicy)
			.build();

创建包含隔离命名空间的会话：			
	为了实现不同的Zookeeper业务之间的隔离，需要为每个业务分配一个独立的命名空间（NameSpace），
	即指定一个Zookeeper的根路径（官方术语：为Zookeeper添加“Chroot”特性）。
	例如（下面的例子）当客户端指定了独立命名空间为“/base”，那么该客户端对Zookeeper上的数据节点的操作都是基于该目录进行的。
	通过设置Chroot可以将客户端应用与Zookeeper服务端的一课子树相对应，
	在多个应用共用一个Zookeeper集群的场景下，这对于实现不同应用之间的相互隔离十分有意义。

	RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);
	CuratorFramework client =
	CuratorFrameworkFactory.builder()
			.connectString(connectionInfo)
			.sessionTimeoutMs(5000)
			.connectionTimeoutMs(5000)
			.retryPolicy(retryPolicy)
			.namespace("base")        // 这里创建了一个命名空间，为了区分不同的客户端的工作空间
			.build();

启动：
	client.start();


创建数据节点：
	Zookeeper的节点创建模式：
		PERSISTENT：持久化
		PERSISTENT_SEQUENTIAL：持久化并且带序列号
		EPHEMERAL：临时
		EPHEMERAL_SEQUENTIAL：临时并且带序列号
1 创建一个节点，初始值为空
	client.create().forPath("path");			//注意：如果没有设置节点属性，节点创建模式默认为持久化节点，内容默认为空
2 创建一个节点，附带初始化内容
	client.create().forPath("path","init".getBytes());
3 创建一个节点，指定创建模式 之 临时节点
	client.create().withMode(CreateMode.EPHEMERAL).forPath("path","init".getBytes());
4 创建一个节点，指定创建模式（临时节点），附带初始化内容，并且自动递归创建父节点
	client.create().creatingParentContainersIfNeeded().withMode(CreateMode.EPHEMERAL).forPath("path","init".getBytes());
	注意：
	这个creatingParentContainersIfNeeded()接口非常有用，因为一般情况开发人员在创建一个子节点必须判断它的父节点是否存在，比如/N1/N2/N3/keyName
	这个时候就必须父节点/N1/N2/N3存在才可以创建keyName，否则报错
	如果不存在直接创建会抛出NoNodeException，使用creatingParentContainersIfNeeded()之后Curator能够自动递归创建所有所需的父节点

删除节点：
1 删除一个节点
	client.delete().forPath("path");		//注意，此方法只能删除叶子节点，否则会抛出异常
2 删除一个节点，并且递归删除其所有的子节点
	client.delete().deletingChildrenIfNeeded().forPath("path");
3 删除一个节点，强制指定版本进行删除
	client.delete().withVersion(10086).forPath("path");    //？？？
4 删除一个节点，强制保证删除
	client.delete().guaranteed().forPath("path"); 
	guaranteed()接口是一个保障措施，只要客户端会话有效，那么Curator会在后台持续进行删除操作，直到删除节点成功。
			
			
读取节点数据：
1 client.getData().forPath("path");
2 读取一个节点的数据内容，同时获取到该节点的stat
	Stat stat = new Stat();
	client.getData().storingStatIn(stat).forPath("path");

	
更新数据节点数据：
1 client.setData().forPath("path","data".getBytes());  		//注意：该接口会返回一个Stat实例
2 更新一个节点的数据内容，强制指定版本进行更新
	client.setData().withVersion(10086).forPath("path","data".getBytes());


检查节点是否存在
1 client.checkExists().forPath("path");
	注意：该方法返回一个Stat实例，用于检查ZNode是否存在的操作. 可以调用额外的方法(监控或者后台处理)并在最后调用forPath( )指定要操作的ZNode
	
	
获取某个节点的所有子节点路径
	client.getChildren().forPath("path");
	注意：该方法的返回值为List<String>,获得ZNode的子节点Path列表。 
	可以调用额外的方法(监控、后台处理或者获取状态watch, background or get stat) 并在最后调用forPath()指定要操作的父ZNode
	

事物
	CuratorFramework的实例包含inTransaction( )接口方法，调用此方法开启一个ZooKeeper事务. 
	可以复合create, setData, check, and/or delete 等操作然后调用commit()作为一个原子操作提交

	client.inTransaction().check().forPath("path")
      .and()
      .create().withMode(CreateMode.EPHEMERAL).forPath("path","data".getBytes())
      .and()
      .setData().withVersion(10086).forPath("path","data2".getBytes())
      .and()
      .commit();


异步接口
	上面提到的创建、删除、更新、读取等方法都是同步的，Curator提供异步接口，
	引入了BackgroundCallback接口用于处理异步接口调用之后服务端返回的结果信息。
	BackgroundCallback接口中一个重要的回调值为CuratorEvent，里面包含事件类型、响应吗和节点的详细信息
CuratorEventType
	事件类型		对应CuratorFramework实例的方法
	CREATE					#create()
	DELETE					#delete()
	EXISTS					#checkExists()
	GET_DATA				#getData()
	SET_DATA				#setData()
	CHILDREN				#getChildren()
	SYNC					#sync(String,Object)
	GET_ACL					#getACL()
	SET_ACL					#setACL()
	WATCHED					#Watcher(Watcher)
	CLOSING					#close()
响应码(#getResultCode())
	响应码				意义
	0				OK，即调用成功
	-4				ConnectionLoss，即客户端与服务端断开连接
	-110			NodeExists，即节点已经存在
	-112			SessionExpired，即会话过期

异步创建节点例子：
	Executor executor = Executors.newFixedThreadPool(2);
	client.create()
      .creatingParentsIfNeeded()
      .withMode(CreateMode.EPHEMERAL)
      .inBackground((curatorFramework, curatorEvent) -> {      
		System.out.println(String.format("eventType:%s,resultCode:%s",curatorEvent.getType(),curatorEvent.getResultCode()));
      },executor)
      .forPath("path");
	注意：如果#inBackground()方法不指定executor，那么会默认使用Curator的EventThread去进行异步处理。





















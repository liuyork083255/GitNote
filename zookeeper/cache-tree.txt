Tree Cache可以监控整个树上的所有节点，类似于PathCache和NodeCache的组合

	TreeCache在初始化(调用start()方法)的时候会回调TreeCacheListener实例一个事TreeCacheEvent，
	而回调的TreeCacheEvent对象的Type为INITIALIZED，ChildData为null，
	此时event.getData().getPath()很有可能导致空指针异常，这里应该主动处理并避免这种情况。

如果监控的这个路径存在，那么在cache.start()的时候，也会回调TreeCacheEvent，路径存在则会输出类似：事件类型：NODE_ADDED | 路径：/example/cache

public class TreeCacheDemo {

    private static final String PATH = "/example/cache";

    public static void main(String[] args) throws Exception {
        TestingServer server = new TestingServer();
        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(1000, 3));
        client.start();
        client.create().creatingParentsIfNeeded().forPath(PATH);
        TreeCache cache = new TreeCache(client, PATH);
        TreeCacheListener listener = (client1, event) ->
                System.out.println("事件类型：" + event.getType() +
                        " | 路径：" + (null != event.getData() ? event.getData().getPath() : null));
        cache.getListenable().addListener(listener);
        cache.start();
        client.setData().forPath(PATH, "01".getBytes());
        Thread.sleep(100);
        client.setData().forPath(PATH, "02".getBytes());
        Thread.sleep(100);
        client.delete().deletingChildrenIfNeeded().forPath(PATH);
        Thread.sleep(1000 * 2);
        cache.close();
        client.close();
        System.out.println("OK!");
    }
}

注意：tree也只是监控某一个节点，然后以这个节点为根节点，下面的所有变化都会被监控



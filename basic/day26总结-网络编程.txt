1:网络编程(理解)
	(1)网络编程：用Java语言实现计算机间数据的信息传递和资源共享
	(2)网络编程模型
		OSI参考模型 七层模型
		TCP/IP参考模型

3)网络编程的三要素
		A:IP地址       -----------------网络中计算机的唯一标识
			a:点分十进制        ----------因为ip二进制不方便记忆，故用这种方法eg：192.168.101.11

			b:IP地址的组成      ----------网络号段+主机号段

			c:IP地址的分类
				A类	1.0.0.1---127.255.255.254	(1)10.X.X.X是私有地址(私有地址就是在互联网上不使用，而被用在局域网络中的地址)							(2)127.X.X.X是保留地址，用做循环测试用的。
				B类	128.0.0.1---191.255.255.254	172.16.0.0---172.31.255.255是私有地址。169.254.X.X是保留地址。
				C类	192.0.0.1---223.255.255.254	192.168.X.X是私有地址
				D类	224.0.0.1---239.255.255.254 	
				E类	240.0.0.1---247.255.255.254
	从前面八位看，A占最高位0，B占前两位10，一次是110，1110
			A之所以不能从0-127，因为全0不能使用
--------------------------------------------------------------------------------------------

			d:dos命令
				ipconfig 查看本机ip地址
				ping 后面跟ip地址。测试本机与指定的ip地址间的通信是否有问题
					特殊的IP地址：
						127.0.0.1 回环地址(表示本机)
						x.x.x.255 广播地址
						x.x.x.0 网络地址
			e:InetAddress
----------------------------------------------------------------------------------------------
 * 看InetAddress的成员方法：
 * public static InetAddress getByName(String host):根据主机名或者IP地址的字符串表示得到IP地址对象

InetAddress.getByName("10.200.33.12");就可以获得IP对象，然后可以用该对象获得ip主机名等
		String add = ia.getHostAddress();
		String name = ia.getHostName();


----------------------------------------------------------------------------------------------


		B:端口                 ----------------------用来区分电脑上每一个应用程序
			正在运行的程序的标识。
			有效端口：0~65535，其中0~1024系统使用或保留端口。不建议使用。

		C:协议
			UDP:数据打包,有限制,不连接,效率高,不可靠
			TCP:建立数据通道,无限制,效率低,可靠

	(3)Socket机制         ---------------  Socket编程就是网络编程
		Socket包办了ip地址和端口号
		原理机制：
			通信的两端都有Socket
			网络通信其实就是Socket通信
			数据在两个Socket间通过IO传输

		A:通信两端都应该有Socket对象
		B:所有的通信都是通过Socket间的IO进行操作的

	(4)UDP协议发送和接收数据(掌握 自己补齐代码)

		注意：一般软件都是两者都具备

		特点：	把数据打包
			数据有限制       ------------64K    每次传输不能超过该值
			不建立连接       ------------所以有时候会丢包
			速度快
			不可靠
		发送：
			创建UDP发送端的Socket对象
			创建数据并把数据打包
			发送数据
			释放资源
			
		接收：
			创建UDP接收端的Socket对象
			创建数据包用于接收数据
			接收数据
			解析数据包       
			释放资源

--------------------------------------------------------------------------------------------------
UDP协议发送数据：
 UDP协议发送数据步骤：
	 * A:创建发送端Socket对象
	 * B:创建数据，并把数据打包
	 * C:调用Socket对象的发送方法发送数据包
	 * D:释放资源
代码：
		// 创建发送端Socket对象
		// DatagramSocket()
		DatagramSocket ds = new DatagramSocket(); --------------注意：UDP 的Socket对象是DatagramSocket，不是Socket

		// 创建数据，并把数据打包
		// DatagramPacket(byte[] buf, int length, InetAddress address, int port)
		// 创建数据
		byte[] bys = "hello,udp,我来了".getBytes();
		// 长度
		int length = bys.length;
		// IP地址对象
		InetAddress address = InetAddress.getByName("192.168.12.92");
		// 端口
		int port = 10086;               -------------------自定义一个端口
		DatagramPacket dp = new DatagramPacket(bys, length, address, port);

		// 调用Socket对象的发送方法发送数据包
		// public void send(DatagramPacket p)
		ds.send(dp);

		// 释放资源
		ds.close();
        	---------------------------发送完成，不管是否被接收，这就是UDP特点

UDP接收数据：
 UDP协议接收数据步骤：
	 * A:创建接收端Socket对象
	 * B:创建一个数据包(接收容器)
	 * C:调用Socket对象的接收方法接收数据
	 * D:解析数据包，并显示在控制台
	 * E:释放资源

代码：
		// 创建接收端Socket对象
		// DatagramSocket(int port)
		DatagramSocket ds = new DatagramSocket(10086); --------------注意：接收的构造有个端口号参数

		// 创建一个数据包(接收容器)
		// DatagramPacket(byte[] buf, int length)
		byte[] bys = new byte[1024];
		int length = bys.length;
		DatagramPacket dp = new DatagramPacket(bys, length);

		// 调用Socket对象的接收方法接收数据
		// public void receive(DatagramPacket p)
		ds.receive(dp); // 阻塞式-----------------------------就是说一直会在这里等待，直到接收到数据为止

		// 解析数据包，并显示在控制台
		// 获取对方的ip
		// public InetAddress getAddress()
		InetAddress address = dp.getAddress();
		String ip = address.getHostAddress();
		// public byte[] getData():获取数据缓冲区
		// public int getLength():获取数据的实际长度
		byte[] bys2 = dp.getData();
		int len = dp.getLength();
		String s = new String(bys2, 0, len);
		System.out.println(ip + "传递的数据是:" + s);

		// 释放资源
		ds.close();
		-------------------------------------------注意：要先运行接收端，不然无法接收。
							这个方法一执行就一直处于阻塞状态，等待着接收数据

测试后：先启动接收端，然后执行发送端，就可以收到发来的信息了
注意：如果多次启动接收端，则会报一个端口被占用异常

后面做咯一个三个dos窗口来实现聊天程序

继续改进：
利用线程来实现

--------------------------------------------------------------------------------------------------

	(5)TCP协议发送和接收数据(掌握 自己补齐代码)

		特点：	建立连接通道
			数据无限制       -----------数据量可以很大，但是速度慢
			速度慢
			可靠
		发送：
			创建TCP客户端的Socket对象
			获取输出流，写数据
			释放资源
			
		接收：
			创建TCP服务器端的Socket对象
			监听客户端连接
			获取输入流，读取数据
			释放资源

--------------------------------------------------------------------------------------------------
 TCP协议发送数据步骤：
	 * A:创建发送端的Socket对象
	 * 		这一步如果成功，就说明连接已经建立成功了。
	 * B:获取输出流，写数据
	 * C:释放资源
但是注意：TCP 必须要先开服务器，因为要保证被收到数据，否则报异常

 * 连接被拒绝。TCP协议一定要先看服务器。
 * java.net.ConnectException: Connection refused: connect

代码：
		// 创建发送端的Socket对象
		// Socket(InetAddress address, int port)
		// Socket(String host, int port)
		// Socket s = new Socket(InetAddress.getByName("192.168.12.92"), 8888);
		Socket s = new Socket("192.168.12.92", 8888);

		// 获取输出流，写数据
		// public OutputStream getOutputStream()
		OutputStream os = s.getOutputStream();      ----------获取的是Socket里面的流
		os.write("hello,tcp,我来了".getBytes());

------------------------		//Socket提供了一个终止，它会通知服务器你别等了，我没有数据过来了
					s.shutdownOutput();----------这样过后，服务器就会自动退出从流中读取信息

		// 释放资源
		s.close();


---------------------------------------------------------------------------------------------------------------

 TCP协议接收数据步骤：
	 * A:创建接收端的Socket对象
	 * B:监听客户端连接。返回一个对应的Socket对象
	 * C:获取输入流，读取数据显示在控制台
	 * D:释放资源

代码：
		// 创建接收端的Socket对象
		// ServerSocket(int port)
		ServerSocket ss = new ServerSocket(8888);       ---------------注意接收端的对象

		// 监听客户端连接。返回一个对应的Socket对象
		// public Socket accept()
		Socket s = ss.accept(); // 侦听并接受到此套接字的连接。此方法在连接传入之前一直阻塞。

		// 获取输入流，读取数据显示在控制台
		InputStream is = s.getInputStream();             ------------这个流同样是从Socket中出来的

		byte[] bys = new byte[1024];
		int len = is.read(bys); // 阻塞式方法，这里阻塞是等着发送端发数据，相当于是三次握手中的第二次
		String str = new String(bys, 0, len);


		// 获取输出流
		OutputStream os = s.getOutputStream();
		os.write("数据已经收到".getBytes());    ---------------反馈给客户端，数据以收到

		String ip = s.getInetAddress().getHostAddress();

		System.out.println(ip + "---" + str);

		// 释放资源
		s.close(); -------------这个应该关闭，因为这个客户端应该关
		ss.close();-------------这个不应该关闭，因为它是服务器

	注意：不能开客户端，不然报错

看图理解三次握手实现细节，TCP中接收端其实要阻塞两次，第一次是等待连接，第二次是等待发送端发送数据

--------------------------------------------------------------------------------------------------

	(6)案例：
		A:UDP
			a:最基本的UDP协议发送和接收数据
			b:把发送数据改进为键盘录入
			c:一个简易聊天小程序并用多线程改进
		B:TCP
			a:最基本的TCP协议发送和接收数据
			b:服务器给出反馈
			c:客户端键盘录入服务器控制台输出
			d:客户端键盘录入服务器写到文本文件
			e:客户端读取文本文件服务器控制台输出
			f:客户端读取文本文件服务器写到文本文件
			g:上传图片
			h:多线程改进上传文件
















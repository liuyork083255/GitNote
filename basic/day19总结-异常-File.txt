1:异常(理解)
	(1)程序出现的不正常的情况。
	(2)异常的体系
		Throwable------这会所有异常超类
			|--Error	严重问题，我们不处理。例如内存溢出
			|--Exception
				|--RuntimeException	运行期异常，我们需要修正代码--------比如数组超出范围了
							----------这个异常就是我们用类有时候的红线，不处理无法编译，但是它可以被try捕获处理
				|--非RuntimeException 编译期异常，必须处理的，否则程序编译不通过
                                            					


-------------------------------------------------
加强理解：除数为零，编译能通过，但是运行出错，所以是运行期异常
不是我们要处理的异常，我们应该修改代码

-------------------------------------------------




	(3)异常的处理：
		A:JVM的默认处理
			把异常的名称,原因,位置等信息输出在控制台，但是呢程序不能继续执行了。
		B:自己处理
			a:try...catch...finally

----------------------------------------------------------------
1：try中的代码一旦出问题，那么它就直接跳出try代码块，后面的代码就不执行了
2：当有多个catch时，同级别的类前后没关系，但是有父类则必须在后面。
3：多个异常可以写在一起，用 | 分隔  ，但是必须是同级别类
4：异常对象的常见方法
		* public String getMessage():异常的消息字符串		
 		* public String toString():返回异常的简单信息描述
 		* 		此对象的类的 name(全路径名)
 		* 		": "（冒号和一个空格） 
 		* 		调用此对象 getLocalizedMessage()方法的结果 (默认返回的是getMessage()的内容)
 		* printStackTrace() 获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。把信息输出在控制台。

自己编写处理代码,后面的程序可以继续执行

----------------------------------------------------------------


				-----------try中代码越少越好，因为jvm会拿出资源来控制，这样效率就低了
			b:throws
				把自己处理不了的，在方法上声明，告诉调用者，这里有问题
				-------方法上可以抛出多个异常，并且也可以抛出不同级别的异常类
	(4)面试题
		A:编译期异常和运行期异常的区别?
			编译期异常 必须要处理的，否则编译不通过
			运行期异常 可以不处理，也可以处理
		B:throw和throws是的区别
			throw:   --------------这个对象就是用来主动抛出异常的方法，很常用
				在方法体中,后面跟的是异常对象名,并且只能是一个
				throw抛出的是一个异常对象，说明这里肯定有一个异常产生了
			throws:
				在方法声明上,后面跟的是异常的类名,可以是多个
				throws是声明方法有异常，是一种可能性，这个异常并不一定会产生
	(5)finally关键字及其面试题
		A:finally用于释放资源，它的代码永远会执行。特殊情况：在执行到finally之前jvm退出了
		B:面试题
			a:final,finally,finalize的区别?
				 * final：最终的意思，可以修饰类，成员变量，成员方法
				 * 		修饰类，类不能被继承
				 * 		修饰变量，变量是常量
				 * 		修饰方法，方法不能被重写
				 * finally：是异常处理的一部分，用于释放资源。
				 * 		一般来说，代码肯定会执行，特殊情况：在执行到finally之前jvm退出了
				 * finalize：是Object类的一个方法，用于垃圾回收
			b:如果在catch里面有return,请问finally还执行吗?如果执行,在return前还是后
				会，前。准确的说是在中间
				----------为什么呢？
-----------------------------------------------------------
		int a = 10;
		try {
			System.out.println(a / 0);
			a = 20;
		} catch (ArithmeticException e) {
			a = 30;
			return a;
			/*
			 * return a在程序执行到这一步的时候，这里不是return a而是return 30;这个返回路径就形成了。
			 * 但是呢，它发现后面还有finally，所以继续执行finally的内容，a=40
			 * 再次回到以前的返回路径，继续走return 30;
			 */
		} finally {
			a = 40;
			//return a;//如果这样结果就是40了。因为在这里就直接结束了该方法，上面catch中的return无法被执行了
		}
		// return a;
---------------------------------------------------------				
				实际上在中间。这个上课我们讲过
		C:异常处理的变形
			try...catch...finally
			try...catch...
			try...catch...catch...
			try...catch...catch...fianlly
			try...finally---------------这种是可以的，用于专门释放资源
	(6)自定义异常
		继承自Exception或者RuntimeException,只需要提供无参构造和一个带参构造即可
		------注意：在我们自定义异常类，如果一个方法中抛出的是RuntimeException,异常，就可以不用抛出来，即不用处理。
-------------------------------------------------------------------
自定义异常一般给出 两个构造方法
public class MyException extends Exception {
	public MyException() {
	}

	public MyException(String message) {
		super(message);---------------------------这种就可以输出语句了。
	}
}
-------------------------------------------------------------------
	(7)异常的注意实现
		A:父的方法有异常抛出,子的重写方法在抛出异常的时候必须要小于等于父的异常 
		B:父的方法没有异常抛出,子的重写方法不能有异常抛出
		C:父的方法抛出多个异常,子的重写方法必须比父少或者小


2:File(掌握)
	(1)IO流操作中大部分都是对文件的操作，所以Java就提供了File类供我们来操作文件
	(2)构造方法
		A:File file = new File("e:\\demo\\a.txt");
		B:File file = new File("e:\\demo","a.txt");
		C:File file = new File("e:\\demo");
		  File file2 = new File(file,"a.txt");
----------------------------------------------------------
		// File(String pathname)：根据一个路径得到File对象
		// 把e:\\demo\\a.txt封装成一个File对象
		File file = new File("E:\\demo\\a.txt");-------注意：这三种创建都有可能文件不存在，而且如果不存在也不会主动创建文件或路劲
							-------此时打印该对象，就是打印的路径名称
		// File(String parent, String child):根据一个目录和一个子文件/目录得到File对象
		File file2 = new File("E:\\demo", "a.txt");

		// File(File parent, String child):根据一个父File对象和一个子文件/目录得到File对象
		File file3 = new File("e:\\demo");
		File file4 = new File(file3, "a.txt");

		// 以上三种方式其实效果一样

----------------------------------------------------------
	(3)File类的功能(自己补齐)-------------下面这些方法都是用File对象来调用的
		A:创建功能 
			-------------public boolean createNewFile():创建文件 如果存在这样的文件，就不创建了
			-------------public boolean mkdir():创建文件夹 如果存在这样的文件夹，就不创建了
			-------------注意：以上两个要想在某个目录下创建内容，该目录首先必须存在。不管是文件夹还是文件，前面的路径必须存在

			-------------public boolean mkdirs():创建文件夹,如果父文件夹不存在，会帮你创建出来，如果存在就返回false
		--------------------------------------------------------------------------------------
		创建代码：	// 需求：我要在e盘目录下创建一个文件夹demo
		File file = new File("e:\\demo");
		System.out.println("mkdir:" + file.mkdir());

		// 需求:我要在e盘目录demo下创建一个文件a.txt
		File file2 = new File("e:\\demo\\a.txt");
		System.out.println("createNewFile:" + file2.createNewFile());----------如果没有demo文件夹，就会报错，他不负责创建前面的文件夹

		// 需求：我要在e盘目录test下创建一个文件b.txt
		// Exception in thread "main" java.io.IOException: 系统找不到指定的路径。
		// 注意：要想在某个目录下创建内容，该目录首先必须存在。
		// File file3 = new File("e:\\test\\b.txt");-------------如果没有盘符，则会创建在当前项目（不是文件）下创建
		// System.out.println("createNewFile:" + file3.createNewFile());

		// 需求:我要在e盘目录test下创建aaa目录
		// File file4 = new File("e:\\test\\aaa");
		// System.out.println("mkdir:" + file4.mkdir());

		// File file5 = new File("e:\\test");
		// File file6 = new File("e:\\test\\aaa");
		// System.out.println("mkdir:" + file5.mkdir());
		// System.out.println("mkdir:" + file6.mkdir());

		// 其实我们有更简单的方法
		File file7 = new File("e:\\aaa\\bbb\\ccc\\ddd");
		System.out.println("mkdirs:" + file7.mkdirs());

		// 看下面的这个东西：
		File file8 = new File("e:\\liuyi\\a.txt");----------------这个例子其实创建了a.txt文件夹，并不是文件
		System.out.println("mkdirs:" + file8.mkdirs());
		--------------------------------------------------------------------------------------
		B:删除功能-------------public boolean delete()

			 * 注意：
			 * 		A:如果你创建文件或者文件夹忘了写盘符路径，那么，默认在项目路径下。
			 * 		B:Java中的删除不走回收站。
			 * 		C:要删除一个文件夹，请注意该文件夹内不能包含文件或者文件夹
		----------------------------------------------------------------------
		
		C:重命名功能

			 * 重命名功能:public boolean renameTo(File dest)-----注意：该方法参数还是一个file对象，说明要改成目标要完整给出。
                                                                      如果给出的路径名相同则是改名，不同则是剪切改名
			 * 		如果路径名相同，就是改名。
			 * 		如果路径名不同，就是改名并剪切。
		------------------------------------------------------------------------------

		D:判断功能
			 * public boolean isDirectory():判断是否是目录
			 * public boolean isFile():判断是否是文件
			 * public boolean exists():判断是否存在
			 * public boolean canRead():判断是否可读
			 * public boolean canWrite():判断是否可写
			 * public boolean isHidden():判断是否隐藏
		-----------------------------------------------------------------------------------
		E:获取功能
			 * public String getAbsolutePath()：获取绝对路径
			 * public String getPath():获取相对路径
			 * public String getName():获取名称            --------------返回的是最后一级文件或者文件夹
			 * public long length():获取长度。字节数      如果最后一级是文件则是文件大小，文件夹则是0，不管里面有没有文件  
			 * public long lastModified():获取最后一次的修改时间，毫秒值
		----------------------------------------------------------------------------------

		F:高级获取功能------这里list方法就理解成给了参数就是过滤器，没有给就是返回所有的文集（夹）
			 * public String[] list():获取指定目录下的所有文件或者文件夹的名称数组
				------new File("e:\\").list();这样就可以获得该目录下的所有文件夹名称了，文件和文件夹都可以被返回
			 * public File[] listFiles():获取指定目录下的所有文件或者文件夹的File数组
		-------------------------------------------------------------------------------------		

		G:过滤器功能---------这个要理解明白
			 * public String[] list(FilenameFilter filter)参数提供一个FilenameFilter接口的实现类，可以将它理解成一个过滤器。

			代码实现： 
			String[] strArray = file.list(new FilenameFilter() {-------------内部类new实现方法。
			@Override
			public boolean accept(File dir, String name) {参数file就是file对象，后面的String就是该目录下的文件夹及文件名
				// return false;                                     这里采用循环的模式，会逐一遍历该目录下的所有的文件（夹）
				// return true;
				// 通过这个测试，我们就知道了，到底把这个文件或者文件夹的名称加不加到数组中，取决于这里的返回值是true还是false
				// 所以，这个的true或者false应该是我们通过某种判断得到的
				// System.out.println(dir + "---" + name);
				// File file = new File(dir, name);
				// // System.out.println(file);
				// boolean flag = file.isFile();
				// boolean flag2 = name.endsWith(".jpg");
				// return flag && flag2;
				return new File(dir, name).isFile() && name.endsWith(".jpg");
			}
		});


	(4)案例：
		A:输出指定目录下指定后缀名的文件名称
			a:先获取所有的，在遍历的时候判断，再输出
			b:先判断，再获取，最后直接遍历输出即可
		B:批量修改文件名称
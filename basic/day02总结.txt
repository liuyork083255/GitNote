1:关键字(掌握)
	(1)被Java语言赋予特定含义的单词
	(2)特点：
		全部小写。--------------String就不是关键字   第一个大写了
	(3)注意事项：
		A:goto和const作为保留字存在。---------------------------意思就是以后可能作为关键字  main也不是关键字
          
		B:类似于Notepad++这样的高级记事本会对关键字有特殊颜色标记

2:标识符(掌握)
	(1)就是给类，接口，方法，变量等起名字的字符序列
                        -----------注意：是可以用全中文标识符的
                                      String 你好 = "you are good !";
				      System.out.println(你好);
                                 语法完全正确！
	(2)组成规则：
		A:英文大小写字母
		B:数字
		C:$和_
               --------还有一些也不行  name#；you%   都不行，只能_和$符号才可以，并且这两个符号可以放在首位
	(3)注意事项：
		A:不能以数字开头
		B:不能是java中的关键字
		C:区分大小写
	(4)常见的命名规则(见名知意)
		A:包	全部小写----------------------------包的命名都是小写
			单级包：小写
				举例：liuyi,com
			多级包：小写，并用.隔开
				举例：cn.itcast,com.baidu				
		B:类或者接口
			一个单词：首字母大写
				举例：Student,Demo
			多个单词：每个单词首字母大写
				举例：HelloWorld,StudentName
		C:方法或者变量
			一个单词：首字母小写
				举例：name,main
			多个单词：从第二个单词开始，每个单词首字母大写
				举例：studentAge,showAllNames()
		D:常量
			全部大写
			一个单词：大写
				举例：PI
			多个单词：大写，并用_隔开
				举例：STUDENT_MAX_AGE

3:注释(掌握)
	(1)就是对程序进行解释说明的文字
	(2)分类：
		A:单行注释	//
		B:多行注释	/**/
		C:文档注释(后面讲) /** */-------------------被javadoc工具解析成文档说明书
	(3)把HelloWorld案例写了一个带注释的版本。
		后面我们要写一个程序的过程。
		需求：
		分析：
		实现：
		代码体现：
	(4)注释的作用
		A:解释说明程序，提高了代码的阅读性。
		B:可以帮助我们调试程序。
			后面我们会讲解一个更高端的一个调试工具

4:常量(掌握)
	(1)在程序执行的过程中，其值不发生改变的量
	(2)分类：
		A:字面值常量
		B:自定义常量(后面讲)
	(3)字面值常量
		A:字符串常量 "hello"
		B:整数常量	12,23
		C:小数常量	12.345
		D:字符常量	'a','A','0'
		E:布尔常量	true,false
		F:空常量	null(后面讲)
	(4)在Java中针对整数常量提供了四种表现形式
		A:二进制	由0，1组成。以0b开头。---------------注意：在低版本的的jdk中不支持0b100二进制，但是在1.7高版本的jkd中支持
		B:八进制	由0，1，...7组成。以0开头。
		C:十进制	由0，1，...9组成。整数默认是十进制。
		D:十六进制	由0，1，...9,a,b,c,d,e,f(大小写均可)组成。以0x开头。

5:进制转换(了解)
	(1)其他进制到十进制
		系数：就是每一个位上的数值
		基数：x进制的基数就是x
		权：对每一个位上的数据，从右，并且从0开始编号，对应的编号就是该数据的权。
		
		结果：系数*基数^权次幂之和。
	(2)十进制到其他进制
		除基取余，直到商为0，余数反转。
	(3)进制转换的快速转换法
		A:十进制和二进制间的转换
			8421码。
		B:二进制到八进制，十六进制的转换

6:变量(掌握)
	(1)在程序的执行过程中，其值在某个范围内可以发生改变的量
	(2)变量的定义格式：
		A:数据类型 变量名 = 初始化值;
		B:数据类型 变量名;
		  变量名 = 初始化值;

7:数据类型(掌握)
	(1)Java是一种强类型语言，针对每种数据都提供了对应的数据类型。
	(2)分类：
		A:基本数据类型：4类8种
		B:引用数据类型：类，接口，数组。
	(3)基本数据类型
		A:整数			占用字节数
			byte			1        -128-127
			short			2        -----------后面范围类似
			int 			4        -----------后面范围类似
			long			8        -----------后面范围类似
----------------------------------
for(long i=0;i<1000000000;i++)     这是可以的，用long类型来循环。但是注意，如果超出了int范围，就要加L
	System.out.println(i);
-----------------------------------
		B:浮点数
			float			4
			double			8
		C:字符
			char			2
		D:布尔
			boolean			1
			
		注意：
			整数默认是int类型，浮点数默认是double。
			
			长整数要加L或者l。---------------如果不加也不想让其报错，则这个数值范围必须在前面小的长度中，例如byte，short
							 int 中都可以，但是一旦超过了int表示范围，则必须加L
                                                               -------但是要区别，浮点型，只要大转小就精度损失错误，不管有没有在小的范围内。
			单精度的浮点数要加F或者f。----因为 float x = 123.456；会报错，因为默认小数时double类型，现在小数没有加f或者F，
						      所以计算机认为是将一个double的小数赋值给float，就会报一个可能损失精度的错误。

8:数据类型转换(掌握)
	(1)boolean类型不参与转换 --------------注意：给bool赋值时只能有true和false，不能用0或1
	(2)默认转换
                -------byte a = 5；int b = 10；
                -------则 a + b  计算机内部是将a一个字节转换成四个字节，所以相加后结果是四个字节，如果此时将该结果赋给byte，
                -------则会出现会丢弃前面三个字节，所以会报一个精度损失错误。但是赋给int类型则是合法的
		A:从小到大
		B:byte,short,char -- int -- long -- float -- double
		C:byte,short,char之间不相互转换，直接转成int类型参与运算。这是这三个而言，如果有long，或者double参与运算，则转成long或double
	(3)强制转换
		A:从大到小
		B:可能会有精度的损失，一般不建议这样使用。
		C:格式：
			目标数据类型 变量名 = (目标数据类型) (被转换的数据);
	(4)思考题和面试题：
		A:下面两种方式有区别吗?
			float f1 = 12.345f;
			float f2 = (float)12.345;
		B:下面的程序有问题吗，如果有，在哪里呢?
			byte b1 = 3;
			byte b2 = 4;
			byte b3 = b1 + b2;----------------注意：两个byte类型做加法，首先转成int类型，所以这句报错，可以理解成
                                          ----------------只要byte，short，参与运算，都将首先转成int类型。称为类型提升。
			byte b4 = 3 + 4;-----------这个不会报错，因为3和4是常量，它会先计算出来，如果在范围内，就不会报错。反编译可以看出来

类型提升：就是byte short char在做运算时，会自动转换成int类型，这就是类型提升
           byte b3 = b1 + b2;后面的都是变量，所以计算机没法知道具体值。
          但是  byte b4 = 3 + 4; 不一样，后面的是常量，计算机能够识别。如果在该范围内，就不会报错。

           所以就可以知道System.out.println('a'+1);输出的是  98，而不是‘b’


		C:下面的操作结果是什么呢?
			byte b = (byte)130;----------先拿130补码，再去掉前三段，然后从补码转回原码就是答案
		D:字符参与运算
			是查找ASCII里面的值
			'a'		97
			'A'		65
			'0'		48
			
			System.out.println('a');
			System.out.println('a' + 1);
		E:字符串参与运算
			这里其实是字符串的连接
			
			System.out.println("hello"+'a'+1);
			System.out.println('a'+1+"hello");
			System.out.println("5+5="+5+5);
			System.out.println(5+5+"=5+5");












1:Eclipse的概述使用(掌握)
	请参照ppt和课堂练习.txt
         ---------------------Eclipse的编译是在保存的时候进行的
------------------------------------低编译  高运行可以，反过来就不可以了

-------------------学会用Eclipse制作jar包，如何导出，选中项目右键export-》java-》jar filr就可以了
-------------------因为一个项目中可以有多个class文件，有的并不是我们要用的，所以在生成jar的同时还要生成说明文档
                   步骤是选中项目右键export-》java-》javadoc


------------------导入项目两个完全相同的项目名，不可以，如果将一个项目名称改变还是不行，则可能是配置文件中的项目名称还是一致的，到.project中改变
	
2:API的概述(了解)
	(1)应用程序编程接口。
	(2)就是JDK提供给我们的一些提高编程效率的java类。

3:Object类(掌握)
	(1)Object是类层次结构的根类，所有的类都直接或者间接的继承自Object类。
	(2)Object类的构造方法有一个，并且是无参构造
		这其实就是理解当时我们说过，子类构造方法默认访问父类的构造是无参构造
	(3)要掌握的方法：
		A:toString()
			返回对象的字符串表示，默认是由类的全路径+'@'+哈希值的十六进制表示。
			这个表示其实是没有意义的，一般子类都会重写该方法。
			如何重写呢?过程我也讲解过了，基本上就是要求信息简单明了。
			但是最终还是自动生成。
		B:equals()
			比较两个对象是否相同。默认情况下，比较的是地址值是否相同。
			而比较地址值是没有意义的，所以，一般子类也会重写该方法。
			重写过程，我也详细的讲解和分析了。
			但是最终还是自动生成。
	(4)要了解的方法：
		A:hashCode() 返回对象的哈希值。不是实际地址值，可以理解为地址值。
		B:getClass() 返回对象的字节码文件对象，反射中我们会详细讲解	
		C:finalize() 用于垃圾回收，在不确定的时间
		D:clone() 可以实现对象的克隆，包括成员变量的数据复制，但是它和两个引用指向同一个对象是有区别的。
           --------------------克隆：如果要克隆必须让目标类实现Cloneable接口，还有一种据说是实现序列化接口
	   --------------------该接口没有方法，称为标记接口，只要实现该接口就可以被赋值（谁要被赋值谁就实现该接口）

	(5)两个注意问题；
		A:直接输出一个对象名称，其实默认调用了该对象的toString()方法。
		B:面试题 
			==和equals()的区别?
			A:==
				基本类型：比较的是值是否相同
				引用类型：比较的是地址值是否相同
			B:equals()
				只能比较引用类型。默认情况下，比较的是地址值是否相同。
				但是，我们可以根据自己的需要重写该方法。


-------------------------------------------------------------------重写技巧，利用向下转型


//	public boolean equals(Object obj) {
//		//为了提高效率
//		if(this == obj){
//			return true;
//		}
//		
//		//为了提供程序的健壮性
//		//我先判断一下，obj是不是学生的一个对象，如果是，再做向下转型，如果不是，直接返回false。
//		//这个时候，我们要判断的是对象是否是某个类的对象?
//		//记住一个格式：对象名 instanceof 类名
//		//表示：判断该对象名是否是该类名一个对象
//		if(!(obj instanceof Student)){-----------------------------------这一句很重要，方法记住
//			return false;                      ---------------同时要记住，equals方法可以自动生成
//		}
//		//如果是就继续
//		
//		Student s = (Student)obj;
//		//System.out.println("同一个对象，还需要向下转型并比较吗?");
//		return this.name.equals(s.name) && this.age == s.age;
//	}

























1:Scanner的使用(了解)
	(1)在JDK5以后出现的用于键盘录入数据的类。
	(2)构造方法：
		A:讲解了System.in这个东西。
			它其实是标准的输入流,对应于键盘录入
		B:构造方法
			InputStream is = System.in;
			
			Scanner(InputStream is)
		C:常用的格式
			Scanner sc = new Scanner(System.in);
	(3)基本方法格式：
		A:hasNextXxx() 判断是否是某种类型的
		B:nextXxx()	返回某种类型的元素
	(4)要掌握的两个方法
		A:public int nextInt()
		B:public String nextLine()
	(5)需要注意的小问题
		A:同一个Scanner对象，先获取数值，再获取字符串会出现一个小问题。
------------------------------------原因是换行符被视为了一个串
		B:解决方案：
			a:重新定义一个Scanner对象
			b:把所有的数据都用字符串获取，然后再进行相应的转换
			
2:String类的概述和使用(掌握)
	(1)多个字符组成的一串数据。
		其实它可以和字符数组进行相互转换。
	(2)构造方法：
		A:public String()
		B:public String(byte[] bytes)-------------把字节转成字符串
                             ------------------例如：byte[] bytes = {97,98,99,100,101};如果将其转为字符串就是abcde
		C:public String(byte[] bytes,int offset,int length)------将字节数组从某一个地方开始，长度length转成字符串
		D:public String(char[] value)------------------把字符串转成字符串
		E:public String(char[] value,int offset,int count)--------------把字符一部分转成字符串
		F:public String(String original)---------------把字符串常量值转换成字符串
		下面的这一个虽然不是构造方法，但是结果也是一个字符串对象
		G:String s = "hello";              -------------------这种方式是没有开辟空间的，准确的说是没有在堆中开辟空间

	(3)字符串的特点
		A:字符串一旦被赋值，就不能改变。
			注意：这里指的是字符串的内容不能改变，而不是引用不能改变。
		B:字面值作为字符串对象和通过构造方法创建对象的不同
			String s = new String("hello");和String s = "hello"的区别?
                  答：
                      new赋值：先是在堆内存中开辟一个空间，然后看hello在不在方法区的常量池中，如果在则将其地址赋给堆，而堆的内存地址赋给变量 
                      直接赋值：先看常量池中有没有hello  有则直接将地址给变量，没有则新建
                  可以看看图解增强记忆

-----------------------------------------------------------------------------------------------
注意：直接赋值方式是先看字符串在不在方法区（也就是常量池），没有就将该字符串放入常量池中
      如果此时要做+操作，则在常量池中再开辟一个空间存放要拼接的字符串，同时再开辟一个空间存放拼接后的内容，并将该地址赋给最初的变量。

     所以可以看到：常量字符串一旦赋值就不能被改变，这句话是没有违背的
     同时还可以看到： 整个过程跟堆内存没有关系

     这就是直接赋值的过程，并没有new
-----------------------------------------------------------------------------------------------
	(4)字符串的面试题(看程序写结果)
		A:==和equals()
			String s1 = new String("hello");
			String s2 = new String("hello");
			System.out.println(s1 == s2);// false
			System.out.println(s1.equals(s2));// true

			String s3 = new String("hello");
			String s4 = "hello";
			System.out.println(s3 == s4);// false
			System.out.println(s3.equals(s4));// true

			String s5 = "hello";
			String s6 = "hello";
			System.out.println(s5 == s6);// true
			System.out.println(s5.equals(s6));// true
		B:字符串的拼接
			String s1 = "hello";
			String s2 = "world";
			String s3 = "helloworld";
			System.out.println(s3 == s1 + s2);// false---------------这个很特殊，因为是变量拼接，所以先开空间再拼接
                                                             注意：这么理解，只要有变量，则理解成是在堆中开辟空间，然后找常量池
                                                             s1+s2的实际指向的是堆内存
			System.out.println(s3.equals((s1 + s2)));// true

			System.out.println(s3 == "hello" + "world");// 这个是常量值相加，所以是先加起来看常量池有没有，有则直接返回，没有开空间
			System.out.println(s3.equals("hello" + "world"));// true
	(5)字符串的功能(自己补齐方法中文意思)
		A:判断功能
			boolean equals(Object obj)----------------比较字符串是否相同，区分大小写 
			boolean equalsIgnoreCase(String str)
			boolean contains(String str)
			boolean startsWith(String str)
			boolean endsWith(String str)
			boolean isEmpty()           --------------这个是判断长度是否为空，如果判断null，说明当前的字符串没有初始化，不能调用方法
		B:获取功能
			int length():获取字符串的长度。    ---------------------注意数组长度没有括号
			char charAt(int index):获取指定索引位置的字符
			int indexOf(int ch):返回指定字符在此字符串中第一次出现处的索引。
			 		为什么这里是int类型，而不是char类型?
			 		原因是：'a'和97其实都可以代表'a'
			int indexOf(String str):返回指定字符串在此字符串中第一次出现处的索引。
			int indexOf(int ch,int fromIndex):返回指定字符在此字符串中从指定位置后第一次出现处的索引。
			int indexOf(String str,int fromIndex):返回指定字符串在此字符串中从指定位置后第一次出现处的索引。
			String substring(int start):从指定位置开始截取字符串,默认到末尾。
			String substring(int start,int end):从指定位置开始到指定位置结束截取字符串。

		C:转换功能
			String的转换功能：
			byte[] getBytes():把字符串转换为字节数组。
			char[] toCharArray():把字符串转换为字符数组。
 			static String valueOf(char[] chs):把字符数组转成字符串。
			static String valueOf(int i):把int类型的数据转成字符串。
					注意：String类的valueOf方法可以把任意类型的数据转成字符串。
			String toLowerCase():把字符串转成小写。
			String toUpperCase():把字符串转成大写。
			String concat(String str):把字符串拼接。

		D:其他功能
			a:替换功能 
				String replace(char old,char new)
				String replace(String old,String new)   ------------跟替换长度无关
			b:去空格功能
				String trim()
			c:按字典比较功能
				int compareTo(String str)-----------------------是用ASCII值来的，调用者减去参数者
									如果两个一长一短，前面完全一致，则返回值是两者长度差
				int compareToIgnoreCase(String str) 
	(6)字符串的案例
		A:模拟用户登录
		B:字符串遍历
		C:统计字符串中大写，小写及数字字符的个数
		D:把字符串的首字母转成大写，其他小写
		E:把int数组拼接成一个指定格式的字符串
		F:字符串反转
		G:统计大串中小串出现的次数
1:正则表达式(理解)
	(1)就是符合一定规则的字符串
	(2)常见规则
		A:字符
			x 字符 x。举例：'a'表示字符a
			\\ 反斜线字符。
			\n 新行（换行）符 ('\u000A') 
			\r 回车符 ('\u000D')
			
		B:字符类
			[abc] a、b 或 c（简单类） 
			[^abc] 任何字符，除了 a、b 或 c（否定） 
			[a-zA-Z] a到 z 或 A到 Z，两头的字母包括在内（范围） 
			[0-9] 0到9的字符都包括
			
		C:预定义字符类
			. 任何字符。我的就是.字符本身，怎么表示呢? \.  
			\d 数字：[0-9]
			\w 单词字符：[a-zA-Z_0-9]  			------------------这些都是字符
				在正则表达式里面组成单词的东西必须有这些东西组成

		D:边界匹配器
			^ 行的开头 
			$ 行的结尾 
			\b 单词边界
				就是不是单词字符的地方。
				举例：hello world?haha;xixi  ----      String[] S = s.split("\\bjava\\b");这就是要拆java，且前后不是单词
										注意：\\是两个；不是单词可以是空格和边界,_这个是单词
			
		E:Greedy 数量词 
				如果没有符号则表示默认一次
			X? X，一次或一次也没有
			X* X，零次或多次
			X+ X，一次或多次
			X{n} X，恰好 n 次 
			X{n,} X，至少 n 次 
			X{n,m} X，至少 n 次，但是不超过 m 次 
	(3)常见功能：(分别用的是谁呢?)
		A:判断功能
			String类的public boolean matches(String regex)
		B:分割功能
			String类的public String[] split(String regex)

注意一点：String[] S = s.split("fghijk");
          String[] S = s.split("[fghijk]");
	是不同的，前者表示为一个整体，后者表示为单个，也就是会先f拆，然后g拆，一直拆到k


                        -----------“fd fds    dsfs                 fdsff”像这样的空格数很多，正则表达式则是：“ +”
			-----------“D:\\One Year Study\\第1阶段---Java基础高级\\java基础\\day14”----->正则表达式是：“\\\\”。两个\代表一个\
		C:替换功能
			String类的public String replaceAll(String regex,String replacement)
		D:获取功能
			Pattern和Matcher
				Pattern p = Pattern.compile("a*b");
				Matcher m = p.matcher("aaaaab");
				
				find():查找存不存在
				group():获取刚才查找过的数据
-------------------------------------------------------------------------------------
String s = "da jia ting wo shuo,jin tian yao xia yu,bu shang wan zi xi,gao xing bu?";
// 规则
String regex = "\\b\\w{3}\\b";------------两边的\b表示边界字符，这样就排除了ting
// 把规则编译成模式对象
Pattern p = Pattern.compile(regex);
// 通过模式对象得到匹配器对象
Matcher m = p.matcher(s);
while (m.find()) {  ---------------判断是否有无，有则后面一次判断会自动判断后面的字符串
	System.out.println(m.group());--------------注意：这个获取前必须要判断一次，因为里面内部自动保存了要提出来的位置，否则报错
}
-------------------------------------------------------------------------------------
	(4)案例
		A:判断电话号码和邮箱     
				String regex = "[a-zA-Z_0-9]+@[a-zA-Z_0-9]{2,6}(\\.[a-zA-Z_0-9]{2,3})+";注意后面的可以用小括号形成整体
		B:按照不同的规则分割数据
		C:把论坛中的数字替换为*
		D:获取字符串中由3个字符组成的单词
	
2:Math(掌握)
	(1)针对数学运算进行操作的类
	(2)常见方法(自己补齐)
		A:绝对值
		B:向上取整
		C:向下取整
		D:两个数据中的大值
		E:a的b次幂
		F:随机数
		G:四舍五入
		H:正平方根
	(3)案例：
		A:猜数字小游戏
		B:获取任意范围的随机数
	
3:Random(理解)
	(1)用于产生随机数的类
	(2)构造方法:
		A:Random() 默认种子，每次产生的随机数不同
		B:Random(long seed) 指定种子，每次种子相同，随机数就相同
			意思是每次执行下来，第一次第二次，，，他们之间不相同，但是这个顺序的数值每次执行程序都是一样的

	(3)成员方法:
		A:int nextInt() 返回int范围内的随机数
		B:int nextInt(int n) 返回[0,n)范围内的随机数

4:System(掌握)
	(1)系统类,提供了一些有用的字段和方法
	(2)成员方法(自己补齐)
		A:运行垃圾回收器
		B:退出jvm
		C:获取当前时间的毫秒值
		D:数组复制
 * 		public static void gc()：运行垃圾回收器。 
 *		public static void exit(int status)-------------------------System.exit(0),给零表示是正常退出，非零是异常退出
 *		public static long currentTimeMillis()------可以用来粗略计算程序运行时间
 *		public static void arraycopy(Object src,int srcPos,Object dest,int destPos,int length)
		例如 int[] a = {11,22,33,44,55};
		     int[] b = {6,7,8,9,10};
		     System.arraycopy(a,1,b,2,2);
                     则打印的结果是6,7,22,33,10

5:BigInteger(理解)
	(1)针对大整数的运算
	(2)构造方法	
		A:BigInteger(String s)
	(3)成员方法(自己补齐)
		A:加
		B:减
		C:乘
		D:除
		E:商和余数
/*
 * public BigInteger add(BigInteger val):加
 * public BigInteger subtract(BigInteger val):减
 * public BigInteger multiply(BigInteger val):乘
 * public BigInteger divide(BigInteger val):除
 * public BigInteger[] divideAndRemainder(BigInteger val):返回商和余数的数组
最后一个方法的例子
		BigInteger[] bis = bi1.divideAndRemainder(bi2);
		System.out.println("商：" + bis[0]);
		System.out.println("余数：" + bis[1]);

 */

6:BigDecimal(理解)
	(1)浮点数据做运算，会丢失精度。所以，针对浮点数据的操作建议采用BigDecimal。(金融相关的项目)
	(2)构造方法
		A:BigDecimal(String s)
	(3)成员方法：
		A:加
		B:减
		C:乘
		D:除
		E:自己保留小数几位
/*
 * 构造方法：
 * 		public BigDecimal(String val)
 * 
 * public BigDecimal add(BigDecimal augend)
 * public BigDecimal subtract(BigDecimal subtrahend)
 * public BigDecimal multiply(BigDecimal multiplicand)
 * public BigDecimal divide(BigDecimal divisor)
 * public BigDecimal divide(BigDecimal divisor,int scale,int roundingMode):商，几位小数，如何舍取
 */

7:Date/DateFormat(掌握)
	(1)Date是日期类，可以精确到毫秒。
		A:构造方法
			Date()------------------------根据当前默认毫秒值创建对象
			Date(long time)---------------根据指定的毫秒值创建对象
		B:成员方法
			getTime()---------------获取毫秒为单位的时间
			setTime(long time)  ------------设置时间	
		C:日期和毫秒值的相互转换
		案例：你来到这个世界多少天了?
	(2)DateFormat针对日期进行格式化和针对字符串进行解析的类，但是是抽象类，所以使用其子类SimpleDateFormat
		A:SimpleDateFormat(String pattern) 给定模式
			yyyy-MM-dd HH:mm:ss        ------------注意：当中的- : 空格都是自定义的 
                     如果用这个构造函数 SimpleDateFormat()创建对象，则format出来的格式是  16-3-7 下午5:15    不是标准的

		B:日期和字符串的转换（Date和String之间的相互转换）
			a:Date -- String
				format()
---------------------------------------------------
		SimpleDateFormat sdf = 
				new SimpleDateFormat("yyyy-MM-dd HH-mm-ss");
		System.out.println(sdf.format(System.currentTimeMillis()));
---------------------------------------------------
			b:String -- Date   -----------------------注意：再转回来的时候格式必须完全匹配
				parse()
-------------------------------------------------------------------------------
		String s = "2015-02-15 12:56:12";
		SimpleDateFormat sdf = 
				new SimpleDateFormat("yyyy-MM-dd HH:ss:mm"); --------可以看出，这里给出的格式要和String一致
		Date d = sdf.parse(s);
		System.out.println(d);

反正都是先得到SimpleDateFormat对象，然后调用它的format或者parse方法

-------------------------------------------------------------------------------
		C:案例：
			制作了一个针对日期操作的工具类。
	
8:Calendar(掌握)
	(1)日历类，封装了所有的日历字段值，通过统一的方法根据传入不同的日历字段可以获取值。
	(2)如何得到一个日历对象呢?
		Calendar rightNow = Calendar.getInstance();
		本质返回的是子类对象
----------------------------------------------------------------------------------
		Calendar rightNow = Calendar.getInstance(); // 子类对象

		// 获取年
		int year = rightNow.get(Calendar.YEAR);
		// 获取月
		int month = rightNow.get(Calendar.MONTH);
		// 获取日
		int date = rightNow.get(Calendar.DATE);

		System.out.println(year + "年" + (month + 1) + "月" + date + "日");------------------月份要加1，因为从0开始的
----------------------------------------------------------------------------------


	(3)成员方法
		A:根据日历字段得到对应的值
		B:根据日历字段和一个正负数确定是添加还是减去对应日历字段的值
		C:设置日历对象的年月日
 * public void add(int field,int amount):根据给定的日历字段和对应的时间，来对当前的日历进行操作。
 * public final void set(int year,int month,int date):设置当前日历的年月日

	(4)案例：
		计算任意一年的2月份有多少天?






























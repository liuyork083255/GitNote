参考链接：http://blog.csdn.net/f2006116/article/details/52469331

直接内存是不在jvm运行时数据区里面的，它的运用场景主要是NIO，它的特点如下：

测试直接内存和堆内存的读写速度：
    @Test  
    public void testDirectMemoryWriteAndReadSpeed() {  
        long tsStart = System.currentTimeMillis();  
        ByteBuffer buffer = ByteBuffer.allocateDirect(400);  
        for (int i = 0; i < 100000; i++) {  
            for (int j = 0; j < 100; j++) {  
                buffer.putInt(j);  
            }  
            buffer.flip();  
            for (byte j = 0; j < 100; j++) {  
                buffer.getInt();  
            }  
            buffer.clear();  
        }  
        System.out.println("DirectMemory读写耗用： " + (System.currentTimeMillis() - tsStart) + " ms");  
        tsStart = System.currentTimeMillis();  
        buffer = ByteBuffer.allocate(400);  
        for (int i = 0; i < 100000; i++) {  
            for (int j = 0; j < 100; j++) {  
                buffer.putInt(j);  
            }  
            buffer.flip();  
            for (byte j = 0; j < 100; j++) {  
                buffer.getInt();  
            }  
            buffer.clear();  
        }  
        System.out.println("Heap读写耗用： " + (System.currentTimeMillis() - tsStart) + " ms");  
    } 
	
	结论是直接内存的读写速度要比堆内存快
	
	
接着测试直接内存和对内存的申请速度：
    @Test  
    public void testDirectMemoryAllocate() {  
        long tsStart = System.currentTimeMillis();  
        for (int i = 0; i < 100000; i++) {  
            ByteBuffer buffer = ByteBuffer.allocateDirect(400);  
  
        }  
        System.out.println("DirectMemory申请内存耗用： " + (System.currentTimeMillis() - tsStart) + " ms");  
        tsStart = System.currentTimeMillis();  
        for (int i = 0; i < 100000; i++) {  
            ByteBuffer buffer = ByteBuffer.allocate(400);  
        }  
        System.out.println("Heap申请内存耗用： " + (System.currentTimeMillis() - tsStart) + " ms");  
    }  
	
	得出的结论就是 堆内存的申请空间速度要比直接内存块
	
	
结论：
	直接内存适用于不常申请，但是需要频繁读取的场景，
	在需要频繁申请的场景下不应该使用直接内存(DirectMemory)，而应该使用堆内内存(HeapMemory)。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	





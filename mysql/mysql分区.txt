
数据库分区：
	以mysql为例
	mysql数据库中的数据是以文件的形势存在磁盘上的，默认放在/mysql/data下面（可以通过my.cnf中的datadir来查看），
	一张表主要对应着三个文件，一个是 frm 存放表结构的，一个是 myd 存放表数据的，一个是 myi 存表索引的。
	如果一张表的数据量太大的话，那么 myd , myi 就会变的很大，查找数据就会变的很慢，这个时候我们可以利用mysql的分区功能，
	在物理上将这一张表对应的三个文件，分割成许多个小块，这样呢，我们查找一条数据时，就不用全部查找了，只要知道这条数据在哪一块，然后在那一块找就行了。
	如果表的数据太大，可能一个磁盘放不下，这个时候，我们可以把数据分配到不同的磁盘里面去。
	
	分区的二种方式：
	1，横向分区
		举例来说明一下，假如有100W条数据，分成十份，前10W条数据放到第一个分区，第二个10W条数据放到第二个分区，依此类推。
		也就是把表分成了十分。取出一条数据的时候，这条数据包含了表结构中的所有字段，也就是说横向分区，并没有改变表的结构。
		
		注意：水平分区一定要通过某个属性列来分割。常见的比如年份，日期等。
	
	2，纵向分区
		这种分区方式一般来说是通过对表的垂直划分来减少目标表的宽度，使某些特定的列被划分到特定的分区，每个分区都包含了其中的列所对应所有行。
		举例来说明，在设计用户表的时候，开始的时候没有考虑好，而把个人的所有信息都放到了一张表里面去，这样这个表里面就会有比较大的字段，
		如个人简介，而这些简介呢，也许不会有好多人去看，所以等到有人要看的时候，在去查找，分表的时候，可以把这样的大字段，分开来。


	常用分区方法：
		RANGE分区 ：根据表的字段的值，依据给定某段连续的区间来分区。
			1  建表的时候进行分区:
				create table teacher
				(id varchar(20) not null ,
				name varchar(20),
				age varchar(20),
				birthdate date not null,
				salary int
				)
				partition by range(year(birthdate))----------------这里最值得注意的是表达式必须有返回值
				(
				partition p1 values less than (1970),
				partition p2 values less than (1990),
				partition p3 values less than maxvalue
				);
				创建teacher表，并在创建teacher表同时根据birthdate字段将表划分为p1、p2、p3三个分区。
				
				或者 根据月来分区：
					/*!50100 PARTITION BY RANGE (month(date_time))
					(PARTITION p01 VALUES LESS THAN (2) ENGINE = InnoDB,
					 PARTITION p02 VALUES LESS THAN (3) ENGINE = InnoDB,
					 PARTITION p03 VALUES LESS THAN (4) ENGINE = InnoDB,
					 PARTITION p04 VALUES LESS THAN (5) ENGINE = InnoDB,
					 PARTITION p05 VALUES LESS THAN (6) ENGINE = InnoDB,
					 PARTITION p06 VALUES LESS THAN (7) ENGINE = InnoDB,
					 PARTITION p07 VALUES LESS THAN (8) ENGINE = InnoDB,
					 PARTITION p08 VALUES LESS THAN (9) ENGINE = InnoDB,
					 PARTITION p09 VALUES LESS THAN (10) ENGINE = InnoDB,
					 PARTITION p10 VALUES LESS THAN (11) ENGINE = InnoDB,
					 PARTITION p11 VALUES LESS THAN (12) ENGINE = InnoDB,
					 PARTITION p12 VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */;
		
			2 如果表创建好了再分区：
				ALTER TABLE teacher 
				partition by range(year(birthdate))
				(
				partition p1 values less than (1970),
				partition p2 values less than (1990),
				partition p3 values less than maxvalue
				);
		
		LIST分区 ： 列表分区。其实list分区和range分区应该说都是一样的，不同的是range分区在分区是的依据是一段连续的区间；而list分区针对的分区依据是一组分布的散列值。
		
			create table student
			 (id varchar(20) not null ,
			 studentno int(20) not null,
			 name varchar(20),
			 age varchar(20)
			 )
			 partition by list(studentno)
			 (
			 partition p1 values in (1,2,3,4),
			 partition p2 values in  (5,6,7,8),
			 partition p3 values in (9,10,11)
			 );
		
			如上创建表student，并将student表分为p1、p2、p3三个分区。需要注意的是一般情况下，针对表的分区字段为int等数值类型。
		
		
		
		
		HASH分区 ： 哈希分区主要是依据表的某个字段以及指定分区的数量。
		
			create table user (
			  id int(20) not null,
			  role varchar(20) not null,
			  description varchar(50) 
			)
			partition by hash(id) 
			partitions 10;
		
			如上创建user表，并将user表平均分为十个分区。比较有限制的就是需要知道表的数据有多少才能更好平均分配分区。
		
		
		
		KEY分区 ： 类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数。必须有一列或多列包含整数值。
			
			create table role( id int(20) not null,name varchar(20) not null)
			partition by linear key(id)
			partitions 10;

		
		
		
	分区表管理	
		
		对指定表添加分区：
			alter table user add partition(partition p4 values less than MAXVALUE);
			alter table emp add partition (partition p3 values less than (4000));
			alter table empl add partition (partition p3 values in (40));
		
		删除指定表指定分区：
			alter table student drop partition p1;
			不可以删除hash或者key分区。
			一次性删除多个分区，alter table emp drop partition p1,p2;
		
		创建子分区：
			create table role_subp(id int(20) not null,name int(20) not null)
			partition by list(id)
			subpartition by hash(name)
			subpartitions 3
			(
			  partition p1 values in(10),
			  partition p2 values in(20)
			)
		
		复合分区：把2个分区合并为一个
			alter table user
			reorganize partition p1,p3 into
			(partition p1 values less than (1000));
		
		重新定义range分区表:
			Alter table emp partitionbyrange(salary)
			(
			partition p1 values less than (2000),
			partition p2 values less than (4000)
			);
		
		删除表的所有分区:
			Alter table emp remove partitioning；--不会丢失数据
		


获取mysql分区表信息的几种方法：		
		
	1.show create table 表名
		可以查看创建分区表的create语句      ---------- 一般创建表的时候就会顺便创建分区

	2.show table status             ----------里面有个 Create_options 字段，如果值是 partitioned，则为分区表
		可以查看表是不是分区表

	3.查看information_schema.partitions表       ---------下面的这个sql就可以查看具体的 分区情况。
		select 
		  partition_name part,  
		  partition_expression expr,  
		  partition_description descr,  
		  table_rows  
		from information_schema.partitions  where 
		  table_schema = schema()  
		  and table_name='test';  ----表名
		可以查看表具有哪几个分区、分区的方法、分区中数据的记录数等信息

	4.explain partitions select语句
		通过此语句来显示扫描哪些分区，及他们是如何使用的.
		
		
		
		
		
		

查看mysql是否支持分区：
	show variables like '%partition%';       ---------   如果查询结果显示Empty，表示不支持分区。	
	
	但是上面的查询方法只是针对mysql5.6以下版本。
	如果mysql5.6以及以上版本，需要使用下面的查询命令：
	
		show plugins;
		
		如果 有这条记录则表示支持分区
			partition                  | ACTIVE   | STORAGE ENGINE     | NULL    | GPL  
	
	
查看mysql版本：
	linux命令：mysql -V
	登录mysql使用命令：status;